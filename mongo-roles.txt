###########################################

variable "database_roles" {
  type = list(object({
    database_name = string
    username       = string
  }))
  default = [
    {
      database_name = "alta"
      username       = "alta_iam_user"
    },
    {
      database_name = "test"
      username       = "test_iam_user"
    }
  ]
}

resource "mongodbatlas_custom_db_role" "custom_roles" {
  for_each = { for role in var.database_roles : role.database_name => role }

  project_id = "<PROJECT-ID>"
  role_name  = "myCustomRole_${each.key}"  # Construct the role name

  actions {
    action = "UPDATE"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  actions {
    action = "INSERT"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  actions {
    action = "REMOVE"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  # Include other actions as needed...
}

##################################################

variable "user_password" {
  type      = string
  sensitive = true
  default   = "yourpassword"  # Replace with your desired password
}

resource "mongodbatlas_database_user" "db_user" {
  for_each = { for user in var.database_roles : user.username => user }

  project_id    = "<PROJECT-ID>"
  username      = each.key
  password      = var.user_password
  auth_database = "admin"  # Use 'admin' as the authentication database

  roles {
    role_name     = "myCustomRole_${each.value.database_name}"  # Construct the role name dynamically
    database_name = "admin"  # Custom roles are stored in the 'admin' database
  }
}


######################








variable "database_roles" {
  type = list(object({
    database_name = string
    username       = string
  }))
  default = [
    {
      database_name = "alta"
      username       = "alta_iam_user"
    },
    {
      database_name = "test"
      username       = "test_iam_user"
    }
  ]
}

resource "mongodbatlas_custom_db_role" "custom_roles" {
  for_each = { for role in var.database_roles : role.database_name => role }

  project_id = "<PROJECT-ID>"
  role_name  = "myCustomRole_${each.key}"  # Construct the role name

  actions {
    action = "UPDATE"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  actions {
    action = "INSERT"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  actions {
    action = "REMOVE"
    resources {
      collection_name = ""
      database_name   = each.value.database_name
    }
  }
  # Include other actions as needed...
}







###############################################################
resource "mongodbatlas_custom_db_role" "test_role" {
  for_each   = toset(var.database_names)  # Convert list to a set to use with for_each
  project_id = "<PROJECT-ID>"
  role_name  = "myCustomRole_${each.key}"  # Append the database name to the role name for uniqueness

  actions {
    action = "UPDATE"
    resources {
      collection_name = ""
      database_name   = each.key  # Use each.key to reference the current database name
    }
  }
  actions {
    action = "INSERT"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "REMOVE"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "FIND"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "LIST_COLLECTIONS"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "CREATE_COLLECTION"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "CREATE_INDEX"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "DROP_COLLECTION"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "LIST_INDEXES"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "DROP_INDEX"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "BYPASS_DOCUMENT_VALIDATION"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "RENAME_COLLECTION"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "CHANGE_STREAM"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "COLL_MOD"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "CONVERT_TO_CAPPED"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "VALIDATE"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
  actions {
    action = "COMPACT"
    resources {
      collection_name = ""
      database_name   = each.key
    }
  }
}
